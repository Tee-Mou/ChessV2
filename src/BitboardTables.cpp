#include "../inc/MoveGen.h"
#include "../inc/BitOps.h"
#include <random>


// void MoveGen::initMagicLookupTable() {
//     for (uint square = 0; square < 64; square++) {
//         // Generate magic number hashes for Bishops
//         bishopMagics[square] = initMagicAttacks(square, true);
//         // And the same for Rooks
//         rookMagics[square] = initMagicAttacks(square, false);
//     }
//     for (uint i = 0; i < 64; i++) { std::cout << bishopMagics[i] << "," << std::endl; }
//         std::cout << "\n\n" << std::endl;
//     for (uint i = 0; i < 64; i++) { std::cout << rookMagics[i] << "," << std::endl; }
// }

void MoveGen::initSliderAttacksLookupTable(bool bishop) {
    for (uint square = 0; square < 64; square++) {
        u64 mask = bishop ? diagonalMasks[square] : cardinalMasks[square];
        uint relevantBits = bishop ? relevantBitsBishop[square] : relevantBitsRook[square];
        uint occupancyIndices = (1 << relevantBits);
        u64 magicNum = bishop ? bishopMagics[square] : rookMagics[square];
        for (uint i=0; i < occupancyIndices; i++) {
            u64 occupancy = initBlockersPermutation(i, relevantBits, mask);
            uint magicIndex = (uint)((occupancy * magicNum) >> (64 - relevantBits));
            if (bishop) {
                bishopAttacks[square][magicIndex] = initBishopAttacksForPosition(square, occupancy);
            }
            else {
                rookAttacks[square][magicIndex] = initRookAttacksForPosition(square, occupancy);
            }
        } 
    }
}

u64 MoveGen::initBlockersPermutation(uint index, uint relevantBits, u64 mask) {
    u64 blockers = 0ULL;
    for (uint count = 0; count < relevantBits; count++)
    {
        uint square = BitOps::countTrailingZeroes(mask);
        if (mask & (1ULL << square)) {
            mask ^= (1ULL << square);
        };
        if (index & (1 << count))
            blockers |= (1ULL << square);
    }
    return blockers;
}

u64 MoveGen::initMagicAttacks(uint square, bool bishop) {
    u64 occupancies[4096];
    u64 attacks[4096];
    u64 usedAttacks[4096];
    u64 mask = bishop ? diagonalMasks[square] : cardinalMasks[square];
    uint relevantBits = bishop ? relevantBitsBishop[square] : relevantBitsRook[square];
    uint occupancyIndices = 1 << relevantBits;
    for (uint i = 0; i < occupancyIndices; i++) {
        occupancies[i] = initBlockersPermutation(i, relevantBits, mask);
        attacks[i] = bishop ? initBishopAttacksForPosition(square, occupancies[i]) : initRookAttacksForPosition(square, occupancies[i]);
    }

    for (uint tries = 0; tries < 100000000; tries++) {
        u64 magicNumber = BitOps::generateMagicNumber();
        if (BitOps::countSetBits((mask*magicNumber) & 0xFF00000000000000) < 6) { continue; }
        std::memset(usedAttacks, 0ULL, sizeof(usedAttacks));
        uint index, fail;
        for (index = 0, fail = 0; !fail && index < occupancyIndices; index++) {
            uint magicIndex = (uint)((occupancies[index]*magicNumber) >> (64 - relevantBits));
            u64 attackPattern = usedAttacks[magicIndex];
            if (attackPattern == 0ULL) {
                (usedAttacks[magicIndex]) = attacks[index];
            }
            else if (attackPattern != attacks[index]) { fail = 1; }
        }
        if (!fail) {
            return magicNumber; 
        }
    }
    return 0ULL;
}

u64 MoveGen::initBishopAttacksForPosition(uint square, u64 blockers) {
    u64 attacks = 0;
    u64 pos = 1ULL << square;
    u64 mask;
    // North-East
    mask = edgeMasks[0] & edgeMasks[3];
    u64 neAttacks = pos;
    while (true) {
        u64 tmp = neAttacks;
        neAttacks |= (neAttacks & mask) << 9;
        if ((blockers & neAttacks) || tmp == neAttacks) { break; }
    };
    // North-West
    mask = edgeMasks[0] & edgeMasks[2];
    u64 nwAttacks = pos;
    while (true) {
        u64 tmp = nwAttacks;
        nwAttacks |= (nwAttacks & mask) << 7;
        if ((blockers & nwAttacks) || tmp == nwAttacks) { break; }
    };
    // South-East
    mask = edgeMasks[1] & edgeMasks[3];
    u64 seAttacks = pos;
    while (true) {
        u64 tmp = seAttacks;
        seAttacks |= (seAttacks & mask) >> 7;
        if ((blockers & seAttacks) || tmp == seAttacks) { break; }
    };
    // South-West
    mask = edgeMasks[1] & edgeMasks[2];
    u64 swAttacks = pos;
    while (true) {
        u64 tmp = swAttacks;
        swAttacks |= (swAttacks & mask) >> 9;
        if ((blockers & swAttacks) || tmp == swAttacks) { break; }
    };
    attacks |= neAttacks | nwAttacks | seAttacks | swAttacks;
    attacks &= ~pos;
    return attacks;
}

u64 MoveGen::initRookAttacksForPosition(uint square, u64 blockers) {
    u64 attacks = 0;
    u64 pos = 1ULL << square;
    u64 mask;
    // North
    mask = edgeMasks[0];
    u64 nAttacks = pos;
    while (true) {
        u64 tmp = nAttacks;
        nAttacks |= (nAttacks & mask) << 8;
        if (blockers & nAttacks || tmp == nAttacks) { break; }
    };
    // East
    mask = edgeMasks[3];
    u64 eAttacks = pos;
    while (true) {
        u64 tmp = eAttacks;
        eAttacks |= (eAttacks & mask) << 1;
        if (blockers & eAttacks || tmp == eAttacks) { break; }
    };
    // West
    mask = edgeMasks[2];
    u64 wAttacks = pos;
    while (true) {
        u64 tmp = wAttacks;
        wAttacks |= (wAttacks & mask) >> 1;
        if (blockers & wAttacks || tmp == wAttacks) { break; }
    };
    // South
    mask = edgeMasks[1];
    u64 sAttacks = pos;
    while (true) {
        u64 tmp = sAttacks;
        sAttacks |= (sAttacks & mask) >> 8;
        if (blockers & sAttacks || tmp == sAttacks) { break; }
    };
    attacks |= nAttacks | eAttacks | wAttacks | sAttacks;
    attacks &= ~pos;
    return attacks;
}

void MoveGen::initKingLookupTable() {
    u64 location = 0;
    for(uint i = 0; i < 64; i++) {
        kingMovesTable[i] = (
            ((location & edgeMasks[0]) << 8)
            |((location & edgeMasks[0] & edgeMasks[2]) << 7)
            |((location & edgeMasks[0] & edgeMasks[3]) << 9)
            |((location & edgeMasks[2]) >> 1)
            |((location & edgeMasks[3]) << 1)
            |((location & edgeMasks[1]) >> 8)
            |((location & edgeMasks[1] & edgeMasks[2]) >> 9)
            |((location & edgeMasks[1] & edgeMasks[3]) >> 7)
        );
        location <<= 1;
        if (location == 0) { location += 1; };
    }
};

void MoveGen::initKnightLookupTable(){
    u64 location = 1;
    u64 doubleNorthEdge = edgeMasks[0] >> 8;
    u64 doubleSouthEdge = edgeMasks[1] << 8;
    u64 doubleLeftEdge = (edgeMasks[2] << 1) & edgeMasks[2];
    u64 doubleRightEdge = (edgeMasks[3] >> 1) & edgeMasks[3];
    for(uint i = 0; i < 64; i++) {
        knightMovesTable[i] = (
            ((location & doubleNorthEdge & edgeMasks[3]) << 17)
            |((location & doubleNorthEdge & edgeMasks[2]) << 15)
            |((location & doubleRightEdge & edgeMasks[0]) << 10)
            |((location & doubleLeftEdge & edgeMasks[0]) << 6)
            |((location & doubleRightEdge & edgeMasks[1]) >> 6)
            |((location & doubleLeftEdge & edgeMasks[1]) >> 10)
            |((location & doubleSouthEdge & edgeMasks[3]) >> 15)
            |((location & doubleSouthEdge & edgeMasks[2]) >> 17)
        );
        location <<= 1;
    }
};

void MoveGen::setBitboards() {

    pawnMasks[0] = 0b0000000000000000000000000000000000000000000000001111111100000000; // White Original Rank 
    pawnMasks[1] = 0b0000000011111111000000000000000000000000000000000000000000000000; // Black Original Rank
    pawnMasks[2] = 0b0000000000000000000000000000000000000000000000000000000000000000; // White en Passant targets
    pawnMasks[3] = 0b0000000000000000000000000000000000000000000000000000000000000000; // Black en Passant targets
    
    edgeMasks[0] = 0b0000000011111111111111111111111111111111111111111111111111111111; // Remove 8th Rank
    edgeMasks[1] = 0b1111111111111111111111111111111111111111111111111111111100000000; // Remove 1st Rank
    edgeMasks[2] = 0b1111111011111110111111101111111011111110111111101111111011111110; // Remove A File
    edgeMasks[3] = 0b0111111101111111011111110111111101111111011111110111111101111111; // Remove H File

    cardinalMasks[0] =  0b0000000000000001000000010000000100000001000000010000000101111110;
    cardinalMasks[1] =  0b0000000000000010000000100000001000000010000000100000001001111100;
    cardinalMasks[2] =  0b0000000000000100000001000000010000000100000001000000010001111010;
    cardinalMasks[3] =  0b0000000000001000000010000000100000001000000010000000100001110110;
    cardinalMasks[4] =  0b0000000000010000000100000001000000010000000100000001000001101110;
    cardinalMasks[5] =  0b0000000000100000001000000010000000100000001000000010000001011110;
    cardinalMasks[6] =  0b0000000001000000010000000100000001000000010000000100000000111110;
    cardinalMasks[7] =  0b0000000010000000100000001000000010000000100000001000000001111110;
    
    cardinalMasks[8] =  0b0000000000000001000000010000000100000001000000010111111000000000;
    cardinalMasks[9] =  0b0000000000000010000000100000001000000010000000100111110000000000;
    cardinalMasks[10] = 0b0000000000000100000001000000010000000100000001000111101000000000;
    cardinalMasks[11] = 0b0000000000001000000010000000100000001000000010000111011000000000;
    cardinalMasks[12] = 0b0000000000010000000100000001000000010000000100000110111000000000;
    cardinalMasks[13] = 0b0000000000100000001000000010000000100000001000000101111000000000;
    cardinalMasks[14] = 0b0000000001000000010000000100000001000000010000000011111000000000;
    cardinalMasks[15] = 0b0000000010000000100000001000000010000000100000000111111000000000;
    
    cardinalMasks[16] = 0b0000000000000001000000010000000100000001011111100000000100000000;
    cardinalMasks[17] = 0b0000000000000010000000100000001000000010011111000000001000000000;
    cardinalMasks[18] = 0b0000000000000100000001000000010000000100011110100000010000000000;
    cardinalMasks[19] = 0b0000000000001000000010000000100000001000011101100000100000000000;
    cardinalMasks[20] = 0b0000000000010000000100000001000000010000011011100001000000000000;
    cardinalMasks[21] = 0b0000000000100000001000000010000000100000010111100010000000000000;
    cardinalMasks[22] = 0b0000000001000000010000000100000001000000001111100100000000000000;
    cardinalMasks[23] = 0b0000000010000000100000001000000010000000011111101000000000000000;
    
    cardinalMasks[24] = 0b0000000000000001000000010000000101111110000000010000000100000000;
    cardinalMasks[25] = 0b0000000000000010000000100000001001111100000000100000001000000000;
    cardinalMasks[26] = 0b0000000000000100000001000000010001111010000001000000010000000000;
    cardinalMasks[27] = 0b0000000000001000000010000000100001110110000010000000100000000000;
    cardinalMasks[28] = 0b0000000000010000000100000001000001101110000100000001000000000000;
    cardinalMasks[29] = 0b0000000000100000001000000010000001011110001000000010000000000000;
    cardinalMasks[30] = 0b0000000001000000010000000100000000111110010000000100000000000000;
    cardinalMasks[31] = 0b0000000010000000100000001000000001111110100000001000000000000000;
    
    cardinalMasks[32] = 0b0000000000000001000000010111111000000001000000010000000100000000;
    cardinalMasks[33] = 0b0000000000000010000000100111110000000010000000100000001000000000;
    cardinalMasks[34] = 0b0000000000000100000001000111101000000100000001000000010000000000;
    cardinalMasks[35] = 0b0000000000001000000010000111011000001000000010000000100000000000;
    cardinalMasks[36] = 0b0000000000010000000100000110111000010000000100000001000000000000;
    cardinalMasks[37] = 0b0000000000100000001000000101111000100000001000000010000000000000;
    cardinalMasks[38] = 0b0000000001000000010000000011111001000000010000000100000000000000;
    cardinalMasks[39] = 0b0000000010000000100000000111111010000000100000001000000000000000;
    
    cardinalMasks[40] = 0b0000000000000001011111100000000100000001000000010000000100000000;
    cardinalMasks[41] = 0b0000000000000010011111000000001000000010000000100000001000000000;
    cardinalMasks[42] = 0b0000000000000100011110100000010000000100000001000000010000000000;
    cardinalMasks[43] = 0b0000000000001000011101100000100000001000000010000000100000000000;
    cardinalMasks[44] = 0b0000000000010000011011100001000000010000000100000001000000000000;
    cardinalMasks[45] = 0b0000000000100000010111100010000000100000001000000010000000000000;
    cardinalMasks[46] = 0b0000000001000000001111100100000001000000010000000100000000000000;
    cardinalMasks[47] = 0b0000000010000000011111101000000010000000100000001000000000000000;

    cardinalMasks[48] = 0b0000000001111110000000010000000100000001000000010000000100000000;
    cardinalMasks[49] = 0b0000000001111100000000100000001000000010000000100000001000000000;
    cardinalMasks[50] = 0b0000000001111010000001000000010000000100000001000000010000000000;
    cardinalMasks[51] = 0b0000000001110110000010000000100000001000000010000000100000000000;
    cardinalMasks[52] = 0b0000000001101110000100000001000000010000000100000001000000000000;
    cardinalMasks[53] = 0b0000000001011110001000000010000000100000001000000010000000000000;
    cardinalMasks[54] = 0b0000000000111110010000000100000001000000010000000100000000000000;
    cardinalMasks[55] = 0b0000000001111110100000001000000010000000100000001000000000000000;
    
    cardinalMasks[56] = 0b0111111000000001000000010000000100000001000000010000000100000000;
    cardinalMasks[57] = 0b0111110000000010000000100000001000000010000000100000001000000000;
    cardinalMasks[58] = 0b0111101000000100000001000000010000000100000001000000010000000000;
    cardinalMasks[59] = 0b0111011000001000000010000000100000001000000010000000100000000000;
    cardinalMasks[60] = 0b0110111000010000000100000001000000010000000100000001000000000000;
    cardinalMasks[61] = 0b0101111000100000001000000010000000100000001000000010000000000000;
    cardinalMasks[62] = 0b0011111001000000010000000100000001000000010000000100000000000000;
    cardinalMasks[63] = 0b0111111010000000100000001000000010000000100000001000000000000000;

    diagonalMasks[0] =  0b0000000001000000001000000001000000001000000001000000001000000000;
    diagonalMasks[1] =  0b0000000000000000010000000010000000010000000010000000010000000000;
    diagonalMasks[2] =  0b0000000000000000000000000100000000100000000100000000101000000000;
    diagonalMasks[3] =  0b0000000000000000000000000000000001000000001000100001010000000000;
    diagonalMasks[4] =  0b0000000000000000000000000000000000000010010001000010100000000000;
    diagonalMasks[5] =  0b0000000000000000000000000000001000000100000010000101000000000000;
    diagonalMasks[6] =  0b0000000000000000000000100000010000001000000100000010000000000000;
    diagonalMasks[7] =  0b0000000000000010000001000000100000001000000001000100000000000000;
    
    diagonalMasks[8] =  0b0000000000100000000100000000100000000100000000100000000000000000;
    diagonalMasks[9] =  0b0000000001000000001000000001000000001000000001000000000000000000;
    diagonalMasks[10] = 0b0000000000000000010000000010000000010000000010100000000000000000;
    diagonalMasks[11] = 0b0000000000000000000000000100000000100010000101000000000000000000;
    diagonalMasks[12] = 0b0000000000000000000000000000001001000100001010000000000000000000;
    diagonalMasks[13] = 0b0000000000000000000000100000010000001000010100000000000000000000;
    diagonalMasks[14] = 0b0000000000000010000001000000100000010000001000000000000000000000;
    diagonalMasks[15] = 0b0000000000000100000010000000100000000100010000000000000000000000;
    
    diagonalMasks[16] = 0b0000000000010000000010000000010000000010000000000000001000000000;
    diagonalMasks[17] = 0b0000000000100000000100000000100000000100000000000000010000000000;
    diagonalMasks[18] = 0b0000000001000000001000000001000000001010000000000000101000000000;
    diagonalMasks[19] = 0b0000000000000000010000000010001000010100000000000001010000000000;
    diagonalMasks[20] = 0b0000000000000000000000100100010000101000000000000010100000000000;
    diagonalMasks[21] = 0b0000000000000010000001000000100001010000000000000101000000000000;
    diagonalMasks[22] = 0b0000000000000100000010000001000000100000000000000010000000000000;
    diagonalMasks[23] = 0b0000000000001000000010000000010001000000000000000100000000000000;
    
    diagonalMasks[24] = 0b0000000000001000000001000000001000000000000000100000010000000000;
    diagonalMasks[25] = 0b0000000000010000000010000000010000000000000001000000100000000000;
    diagonalMasks[26] = 0b0000000000100000000100000000101000000000000010100001000000000000;
    diagonalMasks[27] = 0b0000000001000000001000100001010000000000000101000010001000000000;
    diagonalMasks[28] = 0b0000000000000010010001000010100000000000001010000100010000000000;
    diagonalMasks[29] = 0b0000000000000100000010000101000000000000010100000000100000000000;
    diagonalMasks[30] = 0b0000000000001000000100000010000000000000001000000001000000000000;
    diagonalMasks[31] = 0b0000000000001000000001000100000000000000010000000010000000000000;
    
    diagonalMasks[32] = 0b0000000000000100000000100000000000000010000001000000100000000000;
    diagonalMasks[33] = 0b0000000000001000000001000000000000000100000010000001000000000000;
    diagonalMasks[34] = 0b0000000000010000000010100000000000001010000100000010000000000000;
    diagonalMasks[35] = 0b0000000000100010000101000000000000010100001000100100000000000000;
    diagonalMasks[36] = 0b0000000001000100001010000000000000101000010001000000001000000000;
    diagonalMasks[37] = 0b0000000000001000010100000000000001010000000010000000010000000000;
    diagonalMasks[38] = 0b0000000000010000001000000000000000100000000100000000100000000000;
    diagonalMasks[39] = 0b0000000000000100010000000000000001000000001000000001000000000000;
    
    diagonalMasks[40] = 0b0000000000000010000000000000001000000100000010000001000000000000;
    diagonalMasks[41] = 0b0000000000000100000000000000010000001000000100000010000000000000;
    diagonalMasks[42] = 0b0000000000001010000000000000101000010000001000000100000000000000;
    diagonalMasks[43] = 0b0000000000010100000000000001010000100010010000000000000000000000;
    diagonalMasks[44] = 0b0000000000101000000000000010100001000100000000100000000000000000;
    diagonalMasks[45] = 0b0000000001010000000000000101000000001000000001000000001000000000;
    diagonalMasks[46] = 0b0000000000100000000000000010000000010000000010000000010000000000;
    diagonalMasks[47] = 0b0000000001000000000000000100000000100000000100000000100000000000;
    
    diagonalMasks[48] = 0b0000000000000000000000100000010000001000000100000010000000000000;
    diagonalMasks[49] = 0b0000000000000000000001000000100000010000001000000100000000000000;
    diagonalMasks[50] = 0b0000000000000000000010100001000000100000010000000000000000000000;
    diagonalMasks[51] = 0b0000000000000000000101000010001001000000000000000000000000000000;
    diagonalMasks[52] = 0b0000000000000000001010000100010000000010000000000000000000000000;
    diagonalMasks[53] = 0b0000000000000000010100000000100000000100000000100000000000000000;
    diagonalMasks[54] = 0b0000000000000000001000000001000000001000000001000000001000000000;
    diagonalMasks[55] = 0b0000000000000000010000000010000000010000000010000000010000000000;
    
    diagonalMasks[56] = 0b0000000000000010000001000000100000010000001000000100000000000000;
    diagonalMasks[57] = 0b0000000000000100000010000001000000100000010000000000000000000000;
    diagonalMasks[58] = 0b0000000000001010000100000010000001000000000000000000000000000000;
    diagonalMasks[59] = 0b0000000000010100001000100100000000000000000000000000000000000000;
    diagonalMasks[60] = 0b0000000000101000010001000000001000000000000000000000000000000000;
    diagonalMasks[61] = 0b0000000001010000000010000000010000000010000000000000000000000000;
    diagonalMasks[62] = 0b0000000000100000000100000000100000000100000000100000000000000000;
    diagonalMasks[63] = 0b0000000001000000001000000001000000001000000001000000001000000000;

};